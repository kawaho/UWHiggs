# Get common recipes
recipes = ENV['fsa'] + '/PlotTools/rake/recipes.rake'
import recipes

require ENV['CMSSW_BASE'] + '/src/FinalStateAnalysis/PlotTools/rake/tools.rb'
require 'pathname'

$jobid = ENV['jobid']
$blind = ENV['blind']

# Figure out what run period we are in
$period = '13TeV'
PU = ENV['PU']
#if $jobid.include? '8TeV'
#$period = '8TeV'
#end

################################################################################
## Sample names ################################################################
################################################################################
#
# Get sample names containing a substring
def get_sample_names(substring)
  inputs = Dir.glob("inputs/#{$jobid}/*.txt").select {|x| x.include? substring}
  inputs = inputs.map{|x| File.basename(x).sub(".txt", "")}
  return inputs
end
#

samples = Hash[
		"eraB_m_v1" => get_sample_names('data_SingleMuon_Run2016B_v1'),
		"eraB_m" => get_sample_names('data_SingleMuon_Run2016B'),
                "eraC_m" => get_sample_names('data_SingleMuon_Run2016C'),
                "eraD_m" => get_sample_names('data_SingleMuon_Run2016D'),
                "eraE_m" => get_sample_names('data_SingleMuon_Run2016E'),
                "eraF_m" => get_sample_names('data_SingleMuon_Run2016F'),
                "eraG_m" => get_sample_names('data_SingleMuon_Run2016G'),
                "eraH_m" => get_sample_names('data_SingleMuon_Run2016H'),
                "eraB" => get_sample_names('data_MuonEG_Run2016B'),
                "eraC" => get_sample_names('data_MuonEG_Run2016C'),
                "eraD" => get_sample_names('data_MuonEG_Run2016D'),
                "eraE" => get_sample_names('data_MuonEG_Run2016E'),
                "eraF" => get_sample_names('data_MuonEG_Run2016F'),
                "eraG" => get_sample_names('data_MuonEG_Run2016G'),
                "eraH" => get_sample_names('data_MuonEG_Run2016H'),
                "vbfHEM120" => get_sample_names('VBF_LFV_HToEMu_M120_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "ggHEM120" => get_sample_names('GluGlu_LFV_HToEMu_M120_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "vbfHEM130" => get_sample_names('VBF_LFV_HToEMu_M130_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "ggHEM130" => get_sample_names('GluGlu_LFV_HToEMu_M130_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "vbfHEM" => get_sample_names('VBF_LFV_HToEMu_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "ggHEM" => get_sample_names('GluGlu_LFV_HToEMu_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"DY" => get_sample_names('DYJetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3'),
		"DY1" => get_sample_names('DY1JetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),	
		"DY2" => get_sample_names('DY2JetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"DY3" => get_sample_names('DY3JetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"DY4" => get_sample_names('DY4JetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"DY10" => get_sample_names('DYJetsToLL_M-10to50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"W" => get_sample_names('WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "W1" => get_sample_names('W1JetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
                "W2" => get_sample_names('W2JetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "W3" => get_sample_names('W3JetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "W4" => get_sample_names('W4JetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"WG" => get_sample_names('WGToLNuG_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3'),
		"STtantitop" => get_sample_names('ST_t-channel_antitop_4f_inclusiveDecays_13TeV-powhegV2-madspin-pythia8_TuneCUETP8M1_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
		"STttop" => get_sample_names('ST_t-channel_top_4f_inclusiveDecays_13TeV-powhegV2-madspin-pythia8_TuneCUETP8M1_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
		"STtWantitop" => get_sample_names('ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_v3-PUMoriond17_94X_mcRun2_asymptotic_v3_ext1-v1'),
		"STtWtop" => get_sample_names('ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_v3-PUMoriond17_94X_mcRun2_asymptotic_v3_ext1-v1'),
                "TT2l" => get_sample_names('TTTo2L2Nu_TuneCP5_PSweights_13TeV-powheg-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
                "TT2s" => get_sample_names('TTToSemiLeptonic_TuneCP5_PSweights_13TeV-powheg-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
                "TT2h" => get_sample_names('TTToHadronic_TuneCP5_PSweights_13TeV-powheg-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
		"EWKWminus" => get_sample_names('EWKWMinus2Jets_WToLNu_M-50_13TeV-madgraph-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"EWKWplus" => get_sample_names('EWKWPlus2Jets_WToLNu_M-50_13TeV-madgraph-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"EWKZll" => get_sample_names('EWKZ2Jets_ZToLL_M-50_13TeV-madgraph-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v3'),
		"EWKZnunu" => get_sample_names('EWKZ2Jets_ZToNuNu_13TeV-madgraph-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),	
		"WW" => get_sample_names('WW_TuneCUETP8M1_13TeV-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"WZ" => get_sample_names('WZ_TuneCUETP8M1_13TeV-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"ZZ" => get_sample_names('ZZ_TuneCUETP8M1_13TeV-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"vbfHTT" => get_sample_names('VBFHToTauTau_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "ggHTT" => get_sample_names('GluGluHToTauTau_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v3'),
		"vbfHWW" => get_sample_names('VBFHToWWTo2L2Nu_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "ggHWW" => get_sample_names('GluGluHToWWTo2L2Nu_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"Wminus" => get_sample_names('WminusHToTauTau_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "Wplus" => get_sample_names('WplusHToTauTau_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "ZH" => get_sample_names('ZHToTauTau_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2')
]

# Function to get the .root files for an analyzer and samples
def get_analyzer_results(analyzer, the_samples)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
  the_samples.each do |sample|
    output << "results/#{$jobid}/#{analyzer_base}/#{sample}.root"
  end
  return output
end
def get_plotter_results(analyzer)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
end

#task :EMBDT => get_analyzer_results("AnalyzeEMBDT.py",  samples['ggHEM120'] + samples['vbfHEM120'] + samples['ggHEM130'] + samples['vbfHEM130']) 

#task :EMBDT => get_analyzer_results("AnalyzeEMBDT.py", samples['eraD_m'])
task :EMBDT => get_analyzer_results("AnalyzeEMBDT.py", samples['ggHEM'] + samples['vbfHEM'] + samples['TT2l'] + samples['TT2s'] + samples['TT2h'] + samples['STtantitop'] + samples['STttop'] + samples['STtWantitop'] + samples['STtWtop'] + samples['vbfHTT'] + samples['ggHTT'] + samples['vbfHWW'] + samples['ggHWW'] + samples['WW'] + samples['WZ'] + samples['ZZ'] + samples['Wminus'] + samples['Wplus'] + samples['ZH'] + samples['EWKWminus'] + samples['EWKWplus'] + samples['EWKZll'] + samples['EWKZnunu'] + samples['DY'] + samples['DY1'] + samples['DY2'] + samples['DY3'] + samples['DY4'] + samples['DY10'] + samples['W'] + samples['W1'] + samples['W2'] + samples['W3'] + samples['W4'] + samples['WG'] + samples['eraB_m'] + samples['eraC_m'] + samples['eraD_m'] + samples['eraE_m'] + samples['eraF_m'] + samples['eraG_m'] + samples['eraH_m'])

#task :EMBDT => get_analyzer_results("AnalyzeEMBDT.py", samples['ggHEM'] + samples['vbfHEM'] + samples['TT2l'] + samples['TT2s'] + samples['TT2h'] + samples['STtantitop'] + samples['STttop'] + samples['STtWantitop'] + samples['STtWtop'] + samples['vbfHTT'] + samples['ggHTT'] + samples['vbfHWW'] + samples['ggHWW'] + samples['WW'] + samples['WZ'] + samples['ZZ'] + samples['Wminus'] + samples['Wplus'] + samples['ZH'] + samples['EWKWminus'] + samples['EWKWplus'] + samples['EWKZll'] + samples['EWKZnunu'] + samples['DY'] + samples['DY1'] + samples['DY2'] + samples['DY3'] + samples['DY4'] + samples['DY10'] + samples['W'] + samples['W1'] + samples['W2'] + samples['W3'] + samples['W4'] + samples['WG'] + samples['eraB'] + samples['eraC'] + samples['eraD'] + samples['eraE'] + samples['eraF'] + samples['eraG'] + samples['eraH'])

#task :EMV => get_analyzer_results("AnalyzeEMValid.py",  samples['ggHEM'] + samples['vbfHEM'] + samples['ggHEM120'] + samples['vbfHEM120'] + samples['ggHEM130'] + samples['vbfHEM130']) 

#task :EMV => get_analyzer_results("AnalyzeEMValid.py",  samples['TT2h']) 

task :EMV => get_analyzer_results("AnalyzeEMValid.py", samples['eraB_m'] + samples['eraC_m'] + samples['eraD_m'] + samples['eraE_m'] + samples['eraF_m'] + samples['eraG_m'] + samples['eraH_m'] + samples['ggHEM120'] + samples['vbfHEM120'] + samples['ggHEM130'] + samples['vbfHEM130']  + samples['ggHEM'] + samples['vbfHEM'] + samples['TT2l'] + samples['TT2s'] + samples['TT2h'] + samples['STtantitop'] + samples['STttop'] + samples['STtWantitop'] + samples['STtWtop'] + samples['vbfHTT'] + samples['ggHTT'] + samples['vbfHWW'] + samples['ggHWW'] + samples['WW'] + samples['WZ'] + samples['ZZ'] + samples['Wminus'] + samples['Wplus'] + samples['ZH'] + samples['EWKWminus'] + samples['EWKWplus'] + samples['EWKZll'] + samples['EWKZnunu'] + samples['DY'] + samples['DY1'] + samples['DY2'] + samples['DY3'] + samples['DY4'] + samples['DY10'] + samples['W'] + samples['W1'] + samples['W2'] + samples['W3'] + samples['W4'] + samples['WG'])

#task :EMY => get_analyzer_results("AnalyzeEMYield.py", samples['eraB_m'] + samples['eraC_m'] + samples['eraD_m'] + samples['eraE_m'] + samples['eraF_m'] + samples['eraG_m'] + samples['eraH_m'] + samples['ggHEM'] + samples['vbfHEM'])

#task :EMY => get_analyzer_results("AnalyzeEMYield.py", samples['ggHEM'] + samples['vbfHEM'])

task :EMY => get_analyzer_results("AnalyzeEMYield.py", samples['eraB_m'] + samples['eraC_m'] + samples['eraD_m'] + samples['eraE_m'] + samples['eraF_m'] + samples['eraG_m'] + samples['eraH_m'] + samples['ggHEM'] + samples['vbfHEM'])

task :EMV2 => get_analyzer_results("AnalyzeEMValid2.py", samples['eraB_m'] + samples['eraC_m'] + samples['eraD_m'] + samples['eraE_m'] + samples['eraF_m'] + samples['eraG_m'] + samples['eraH_m'] + samples['ggHEM'] + samples['vbfHEM'] + samples['TT2l'] + samples['TT2s'] + samples['TT2h'] + samples['STtantitop'] + samples['STttop'] + samples['STtWantitop'] + samples['STtWtop'] + samples['vbfHTT'] + samples['ggHTT'] + samples['vbfHWW'] + samples['ggHWW'] + samples['WW'] + samples['WZ'] + samples['ZZ'] + samples['Wminus'] + samples['Wplus'] + samples['ZH'] + samples['EWKWminus'] + samples['EWKWplus'] + samples['EWKZll'] + samples['EWKZnunu'] + samples['DY'] + samples['DY1'] + samples['DY2'] + samples['DY3'] + samples['DY4'] + samples['DY10'] + samples['W'] + samples['W1'] + samples['W2'] + samples['W3'] + samples['W4'] + samples['WG'])

task :EMS => get_analyzer_results("AnalyzeEMSys.py",  samples['ggHEM'] + samples['vbfHEM']) 

task :EML => get_analyzer_results("AnalyzeEMLHE.py",  samples['ggHEM'] + samples['vbfHEM']) 

task :EMS2 => get_analyzer_results("AnalyzeEMSys2.py",  samples['ggHEM'] + samples['vbfHEM']) 

task :EMC => get_analyzer_results("AnalyzeEMBDTCat.py",  samples['ggHEM'] + samples['vbfHEM']) 

#task :EMT => get_analyzer_results("AnalyzeEMTree.py",  samples['eraB'] + samples['eraC'] + samples['eraD'] + samples['eraE'] + samples['eraF'] + samples['eraG'] + samples['eraH']) 

task :EMT => get_analyzer_results("AnalyzeEMTree.py", samples['eraB_m'] + samples['eraC_m'] + samples['eraD_m'] + samples['eraE_m'] + samples['eraF_m'] + samples['eraG_m'] + samples['eraH_m'] ) 

$etdir = "plots/#{$jobid}/AnalyzerMuTau/mt_now/"
directory $etdir
file  "#{$etdir}/plot#{$period}.root" do |t|
  sh "echo $jobid"
  sh "python myNewPlotterReco.py"

end
