# Get common recipes
recipes = ENV['fsa'] + '/PlotTools/rake/recipes.rake'
import recipes

require ENV['CMSSW_BASE'] + '/src/FinalStateAnalysis/PlotTools/rake/tools.rb'
require 'pathname'

$jobid = ENV['jobid']
$blind = ENV['blind']

# Figure out what run period we are in
$period = '13TeV'
PU = ENV['PU']
#if $jobid.include? '8TeV'
#  $period = '8TeV'
#end


################################################################################
## Sample names ################################################################
################################################################################
#
# Get sample names containing a substring
def get_sample_names(substring)
  inputs = Dir.glob("inputs/#{$jobid}/*.txt").select {|x| x.include? substring}
  inputs = inputs.map{|x| File.basename(x).sub(".txt", "")}
  return inputs
end
#
samples = Hash[
		"eraB" => get_sample_names('data_SingleElectron_Run2017B-31Mar2018'),	
                "eraC" => get_sample_names('data_SingleElectron_Run2017C-31Mar2018'),
                "eraD" => get_sample_names('data_SingleElectron_Run2017D-31Mar2018'),
                "eraE" => get_sample_names('data_SingleElectron_Run2017E-31Mar2018'),
                "eraF" => get_sample_names('data_SingleElectron_Run2017F-31Mar2018'),
		"DY" => get_sample_names('DYJetsToLL_M-50_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v1'),
		"DY10" => get_sample_names('DYJetsToLL_M-10to50_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v1'),
		"DY1" => get_sample_names('DY1JetsToLL_M-50_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v1'),	
		"DY2" => get_sample_names('DY2JetsToLL_M-50_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v1'),
		"DY3" => get_sample_names('DY3JetsToLL_M-50_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v1'),
		"DY4" => get_sample_names('DY4JetsToLL_M-50_TuneCP5_13TeV-madgraphMLM-pythia8_v2_94X_mc2017_realistic'),
                "W" => get_sample_names('WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v2'),
                "W1" => get_sample_names('W1JetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v3'),
                "W2" => get_sample_names('W2JetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v4'),
                "W3" => get_sample_names('W3JetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v1'),
                "W4" => get_sample_names('W4JetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8_v14-v1'),
		"STtantitop" => get_sample_names('ST_t-channel_antitop_4f_inclusiveDecays_TuneCP5_13TeV-powhegV2-madspin-pythia8_v14-v2'),
		"STttop" => get_sample_names('ST_t-channel_top_4f_inclusiveDecays_TuneCP5_13TeV-powhegV2-madspin-pythia8_v14-v1'),
		"STtWantitop" => get_sample_names('ST_tW_antitop_5f_inclusiveDecays_TuneCP5_13TeV-powheg-pythia8_v14-v2'),
		"STtWtop" => get_sample_names('ST_tW_top_5f_inclusiveDecays_TuneCP5_13TeV-powheg-pythia8_v14-v2'),
		"TTTo2L2Nu" => get_sample_names('TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8_v14-v1'),
		"TTToHadronic" => get_sample_names('TTToHadronic_TuneCP5_13TeV-powheg-pythia8_v14-v2'),
		"TTToSemiLeptonic" => get_sample_names('TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8_v14-v1'),
		"EWKWminus" => get_sample_names('EWKWMinus2Jets_WToLNu_M-50_TuneCP5_13TeV-madgraph-pythia8_v14-v2'),
		"EWKWplus" => get_sample_names('EWKWPlus2Jets_WToLNu_M-50_TuneCP5_13TeV-madgraph-pythia8_v14-v2'),
		"EWKZll" => get_sample_names('EWKZ2Jets_ZToLL_M-50_TuneCP5_13TeV-madgraph-pythia8_v14-v2'),
		"EWKZnunu" => get_sample_names('EWKZ2Jets_ZToNuNu_TuneCP5_13TeV-madgraph-pythia8_v14-v2'),	
		"WW" => get_sample_names('WW_TuneCP5_13TeV-pythia8_v14-v1'),
		"WZ" => get_sample_names('WZ_TuneCP5_13TeV-pythia8_v14-v1'),
		"ZZ" => get_sample_names('ZZ_TuneCP5_13TeV-pythia8_v14-v1'),
]


# Function to get the .root files for an analyzer and samples
def get_analyzer_results(analyzer, the_samples)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
  the_samples.each do |sample|
    output << "results/#{$jobid}/#{analyzer_base}/#{sample}.root"
  end
  return output
end
def get_plotter_results(analyzer)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
end

task :EE => get_analyzer_results("AnalyzeEE.py", samples['eraB'] + samples['eraC'] + samples['eraD'] + samples['eraE'] + samples['eraF'] + samples['STtantitop'] + samples['STttop'] + samples['STtWantitop'] + samples['STtWtop'] + samples['TTTo2L2Nu'] + samples['TTToHadronic'] + samples['TTToSemiLeptonic'] + samples['WW'] + samples['WZ'] + samples['ZZ'] + samples['EWKWminus'] + samples['EWKWplus'] + samples['EWKZll'] + samples['EWKZnunu'] + samples['DY'] + samples['DY1'] + samples['DY2'] + samples['DY3'] + samples['DY4'] + samples['DY10'])

#task :EEFake => get_analyzer_results("AnalyzeEEFake.py", samples['eraB'] + samples['eraC'] + samples['eraD'] + samples['eraE'] + samples['eraF'] + samples['STtantitop'] + samples['STttop'] + samples['STtWantitop'] + samples['STtWtop'] + samples['TTTo2L2Nu'] + samples['TTToHadronic'] + samples['TTToSemiLeptonic'] + samples['WW'] + samples['WZ'] + samples['ZZ'] + samples['EWKWminus'] + samples['EWKWplus'] + samples['EWKZll'] + samples['EWKZnunu'] + samples['DY'] + samples['DY1'] + samples['DY2'] + samples['DY3'] + samples['DY4'] + samples['DY10'] + samples['W'] + samples['W1'] + samples['W2'] + samples['W3'] + samples['W4'])

task :EEFake => get_analyzer_results("AnalyzeEEFake.py", samples['W'] + samples['W1'] + samples['W2'] + samples['W3'] + samples['W4'])


$etdir = "plots/#{$jobid}/AnalyzerMuTau/mt_now/"
directory $etdir 
file  "#{$etdir}/plot#{$period}.root" do |t|
  sh "echo $jobid"
  sh "python myNewPlotterReco.py" 
  
end