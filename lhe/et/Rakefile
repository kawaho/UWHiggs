# Get common recipes
recipes = ENV['fsa'] + '/PlotTools/rake/recipes.rake'
import recipes

require ENV['CMSSW_BASE'] + '/src/FinalStateAnalysis/PlotTools/rake/tools.rb'
require 'pathname'

$jobid = ENV['jobid']
$blind = ENV['blind']

# Figure out what run period we are in
$period = '13TeV'
PU = ENV['PU']
#if $jobid.include? '8TeV'
#  $period = '8TeV'
#end

################################################################################
## Sample names ################################################################
################################################################################
#
# Get sample names containing a substring
def get_sample_names(substring)
  inputs = Dir.glob("inputs/#{$jobid}/*.txt").select {|x| x.include? substring}
  inputs = inputs.map{|x| File.basename(x).sub(".txt", "")}
  return inputs
end
#
samples = Hash[
		"vbfHET" => get_sample_names('VBF_LFV_HToETau_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
                "ggHET" => get_sample_names('GluGlu_LFV_HToETau_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
		"vbfHTT" => get_sample_names('VBFHToTauTau_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "ggHTT" => get_sample_names('GluGluHToTauTau_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v3'),
		"vbfHWW" => get_sample_names('VBFHToWWTo2L2Nu_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "ggHWW" => get_sample_names('GluGluHToWWTo2L2Nu_M125_13TeV_powheg_pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "embedB" => get_sample_names('embedded_EmbeddingRun2016B_ElTauFinalState'),
                "embedC" => get_sample_names('embedded_EmbeddingRun2016C_ElTauFinalState'),
                "embedD" => get_sample_names('embedded_EmbeddingRun2016D_ElTauFinalState'),
                "embedE" => get_sample_names('embedded_EmbeddingRun2016E_ElTauFinalState'),
                "embedF" => get_sample_names('embedded_EmbeddingRun2016F_ElTauFinalState'), 
                "embedG" => get_sample_names('embedded_EmbeddingRun2016G_ElTauFinalState'),
                "embedH" => get_sample_names('embedded_EmbeddingRun2016H_ElTauFinalState'),
                "STtantitop" => get_sample_names('ST_t-channel_antitop_4f_inclusiveDecays_13TeV-powhegV2-madspin-pythia8_TuneCUETP8M1_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
                "STttop" => get_sample_names('ST_t-channel_top_4f_inclusiveDecays_13TeV-powhegV2-madspin-pythia8_TuneCUETP8M1_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
                "STtWantitop" => get_sample_names('ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_v3-PUMoriond17_94X_mcRun2_asymptotic_v3_ext1-v1'),
                "STtWtop" => get_sample_names('ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_v3-PUMoriond17_94X_mcRun2_asymptotic_v3_ext1-v1'),
                "TTTo2L2Nu" => get_sample_names('TTTo2L2Nu_TuneCP5_PSweights_13TeV-powheg-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
                "TTToHadronic" => get_sample_names('TTToHadronic_TuneCP5_PSweights_13TeV-powheg-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
                "TTToSemiLeptonic" => get_sample_names('TTToSemiLeptonic_TuneCP5_PSweights_13TeV-powheg-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v1'),
                "WW" => get_sample_names('WW_TuneCUETP8M1_13TeV-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "WZ" => get_sample_names('WZ_TuneCUETP8M1_13TeV-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'), 
                "ZZ" => get_sample_names('ZZ_TuneCUETP8M1_13TeV-pythia8_v3-PUMoriond17_94X_mcRun2_asymptotic_v3-v2'),
                "dataB" => get_sample_names('data_SingleElectron_Run2016B'),
                "dataC" => get_sample_names('data_SingleElectron_Run2016C'),
                "dataD" => get_sample_names('data_SingleElectron_Run2016D'),
                "dataE" => get_sample_names('data_SingleElectron_Run2016E'),
                "dataF" => get_sample_names('data_SingleElectron_Run2016F'),
                "dataG" => get_sample_names('data_SingleElectron_Run2016G'),
                "dataH" => get_sample_names('data_SingleElectron_Run2016H'),
           

]


# Function to get the .root files for an analyzer and samples
def get_analyzer_results(analyzer, the_samples)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
  the_samples.each do |sample|
    output << "results/#{$jobid}/#{analyzer_base}/#{sample}.root"
  end
  return output
end
def get_plotter_results(analyzer)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
end

#task :ET => get_analyzer_results("AnalyzeETauGen.py", samples['vbfHTT'] + samples['ggHTT'] + samples['vbfHWW'] + samples['ggHWW'] + samples['ggHET'] + samples['vbfHET'])

#task :ET => get_analyzer_results("AnalyzeETauCF.py", samples['ggHET'] + samples['vbfHET'])

#task :ET => get_analyzer_results("AnalyzeETauCF.py", samples['embedE'] + samples['embedF'] + samples['embedG'] + samples['embedH'] + samples['embedB'] + samples['embedC'] + samples['embedD'] + samples['STtantitop'] + samples['STttop'] + samples['STtWantitop'] + samples['STtWtop'] + samples['TTTo2L2Nu'] + samples['TTToHadronic'] + samples['TTToSemiLeptonic'] + samples['WW'] + samples['WZ'] + samples['ZZ'])

task :ET => get_analyzer_results("AnalyzeETauCF.py", samples['dataB'] + samples['dataC'] + samples['dataD'] + samples['dataE'] + samples['dataF'] + samples['dataG'] + samples['dataH'])


$etdir = "plots/#{$jobid}/AnalyzerMuTau/mt_now/"
directory $etdir 
file  "#{$etdir}/plot#{$period}.root" do |t|
  sh "echo $jobid"
  sh "python myNewPlotterReco.py" 
  
end
